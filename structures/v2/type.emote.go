package structures

import (
	"time"

	"github.com/seventv/common/utils"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type Emote struct {
	ID               primitive.ObjectID   `json:"id" bson:"_id,omitempty"`
	Name             string               `json:"name" bson:"name"`
	OwnerID          primitive.ObjectID   `json:"owner_id" bson:"owner"`
	Visibility       int32                `json:"visibility" bson:"visibility"`
	Mime             string               `json:"mime" bson:"mime"`
	Status           int32                `json:"status" bson:"status"`
	Tags             []string             `json:"tags" bson:"tags"`
	SharedWith       []primitive.ObjectID `json:"shared_with" bson:"shared_with"`
	LastModifiedDate time.Time            `json:"edited_at" bson:"edited_at"`
	Width            [4]int16             `json:"width" bson:"width"`   // The emote's width in pixels
	Height           [4]int16             `json:"height" bson:"height"` // The emote's height in pixels
	Animated         bool                 `json:"animated" bson:"animated"`

	// ChannelCount is used during the popularity sort check, generated by a pipeline.
	// It is not used anywhere else
	ChannelCount          int32     `json:"channel_count,omitempty" bson:"channel_count"`
	LastChannelCountCheck time.Time `json:"channel_count_checked_at,omitempty" bson:"channel_count_checked_at"`

	Owner        User       `json:"owner,omitempty" bson:"-"`
	AuditEntries []AuditLog `json:"audit_entries,omitempty" bson:"-"`
	Channels     []User     `json:"channels,omitempty" bson:"-"`
	Reports      []Report   `json:"reports,omitempty" bson:"-"`
	Provider     string     `json:"provider,omitempty" bson:"-"`    // The service provider for the emote
	ProviderID   string     `json:"provider_id,omitempty" bson:"-"` // The emote ID as defined by the foreign provider. Nil if 7TV
	URLs         [][]string `json:"urls,omitempty" bson:"-"`        // Synthesized URLs to CDN for the emote
}

const (
	EmoteVisibilityPrivate int32 = 1 << iota
	EmoteVisibilityGlobal
	EmoteVisibilityUnlisted
	EmoteVisibilityOverrideBTTV
	EmoteVisibilityOverrideFFZ
	EmoteVisibilityOverrideTwitchGlobal
	EmoteVisibilityOverrideTwitchSubscriber
	EmoteVisibilityZeroWidth
	EmoteVisibilityPermanentlyUnlisted

	EmoteVisibilityAll int32 = (1 << iota) - 1
)

var EmoteVisibilitySimpleMap = map[int32]string{
	EmoteVisibilityPrivate:                  "PRIVATE",
	EmoteVisibilityGlobal:                   "GLOBAL",
	EmoteVisibilityUnlisted:                 "UNLISTED",
	EmoteVisibilityOverrideFFZ:              "OVERRIDE_FFZ",
	EmoteVisibilityOverrideBTTV:             "OVERRIDE_BTTV",
	EmoteVisibilityOverrideTwitchSubscriber: "OVERRIDE_TWITCH_SUBSCRIBER",
	EmoteVisibilityOverrideTwitchGlobal:     "OVERRIDE_TWITCH_GLOBAL",
	EmoteVisibilityZeroWidth:                "ZERO_WIDTH",
}

func (e *Emote) GetSimpleVisibility() []string {
	simpleVis := []string{}
	for vis, s := range EmoteVisibilitySimpleMap {
		if !utils.BitField.HasBits(int64(e.Visibility), int64(vis)) {
			continue
		}

		simpleVis = append(simpleVis, s)
	}

	return simpleVis
}

const (
	EmoteStatusDeleted int32 = iota - 1
	EmoteStatusProcessing
	EmoteStatusPending
	EmoteStatusDisabled
	EmoteStatusLive
)
